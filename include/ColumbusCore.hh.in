/*
 * Copyright (C) 2012 Canonical, Ltd.
 *
 * Authors:
 *    Jussi Pakkanen <jussi.pakkanen@canonical.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This file contains the most basic definitions in Columbus.
 * Almost every single source file includes this, so it must be fast.
 * It must work as such when included either from C or C++.
 *
 */

#ifndef COLUMBUSCORE_H
#define COLUMBUSCORE_H


/* Macros that set symbol visibilities in shared libraries properly.
 * Adapted from http://gcc.gnu.org/wiki/Visibility
 */

#if defined _WIN32 || defined __CYGWIN__
  #ifdef BUILDING_COLUMBUS
    #define COL_PUBLIC __declspec(dllexport)
  #else
    #define COL_PUBLIC __declspec(dllimport)
  #endif
#else
  #if defined __GNUC__
    #define COL_PUBLIC __attribute__ ((visibility("default")))
  #else
    #pragma message ("Compiler does not support symbol visibility.")
    #define COL_PUBLIC
  #endif
#endif

#define UNUSED_VAR __attribute__ ((unused))

#ifdef __cplusplus
  #include <cstddef>
  #include <cstdint>
  #include <utility>
#else
  #include<stddef.h>
  #include <stdint.h>
#endif

#ifdef __cplusplus
  #define COL_NAMESPACE_START namespace Columbus {
  #define COL_NAMESPACE_END }
#endif

#ifdef DEBUG_MESSAGES
  #ifdef __cplusplus
    #include<cstdio>
  #else
    #include<stdio.h>
  #endif
  #define debugMessage(...) printf(__VA_ARGS__);
#else
  #define debugMessage(...)
#endif


#define COLUMBUS_VERSION_STRING "${SO_VERSION}"
#define COLUMBUS_ABI_VERSION ${ABI_VERSION}
#define COLUMBUS_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}"
#define COLUMBUS_DATADIR COLUMBUS_INSTALL_PREFIX "/share/${COL_LIB_BASENAME}${SO_VERSION_MAJOR}/"

#if 1
typedef ${LETTER_TYPE} Letter_;

#ifdef __cplusplus
typedef uint32_t LetterUCS4;
//typedef uint16_t LetterUCS2;
typedef uint16_t LetterUTF16;

template<typename T>
struct LetterBaseT {
	T val;
	//using LetterType = T;

	LetterBaseT(const T& l) : val(l) { }

#if 0
	bool isSurrogate() const;

	bool isHighSurrogate() const;

	bool isLowSurrogate() const;
#endif

	operator T() {
		return val;
	}

	operator T&() {
		return val;
	}

	operator const T&() const {
		return val;
	}

	operator T&&() const {
		return std::move(val);
	}
};

template<typename T>
struct LetterT;

template<>
struct LetterT<LetterUCS4> : public LetterBaseT<LetterUCS4> {

//	using LetterT<LetterUCS4>::val;
//	using LetterT<LetterUCS4>::LetterType;
	using LetterBaseT<LetterUCS4>::LetterBaseT;

//	Letter(const LetterUCS4& l) : LetterBaseT<LetterUCS4>(l) { }

	bool isSurrogate() const {
		return false;
	}

	bool isHighSurrogate() const {
		return false;
	}

	bool isLowSurrogate() const {
		return false;
	}
};

template<>
struct LetterT<LetterUTF16> : public LetterBaseT<LetterUTF16> {

//	using LetterT<LetterUTF16>::val;
//	using LetterT<LetterUTF16>::LetterType;
	using LetterBaseT<LetterUTF16>::LetterBaseT;

//	Letter(const LetterUTF16& l) : LetterBaseT<LetterUTF16>(l) { }

	bool isSurrogate() const {
		return isHighSurrogate() || isLowSurrogate();
	}

	bool isHighSurrogate() const {
		return (val > 0xd7ffu) && (val < 0xdc00u);
	}

	bool isLowSurrogate() const {
		return (val > 0xdbffu) && (val < 0xe000u);
	}
};

//typedef LetterT<Letter_>::LetterType Letter;
typedef Letter_ Letter;
typedef LetterT<Letter> LetterW;
//static_assert(std::is_pod<LetterW>::value, "LetterW is not POD");
static_assert(std::is_standard_layout<LetterW>::value, "LetterW is not standard layout");
static_assert(std::is_trivially_copyable<LetterW>::value, "LetterW is not trivially copyable");
#else
typedef Letter_ Letter;
#endif /* __cplusplus */

#else
typedef ${LETTER_TYPE} Letter;
#endif /* 0 */

#define INTERNAL_ENCODING "${INTERNAL_ENCODING}"

typedef uint32_t WordID;
#define INVALID_WORDID ((WordID)-1)

typedef uintptr_t DocumentID;
#define INVALID_DOCID ((DocumentID)-1)

typedef uint32_t TrieOffset;

#cmakedefine HAS_SPARSE_HASH

#endif
