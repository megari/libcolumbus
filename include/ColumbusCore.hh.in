/*
 * Copyright (C) 2012 Canonical, Ltd.
 *
 * Authors:
 *    Jussi Pakkanen <jussi.pakkanen@canonical.com>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; version 3.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * This file contains the most basic definitions in Columbus.
 * Almost every single source file includes this, so it must be fast.
 * It must work as such when included either from C or C++.
 *
 */

#ifndef COLUMBUSCORE_H
#define COLUMBUSCORE_H


/* Macros that set symbol visibilities in shared libraries properly.
 * Adapted from http://gcc.gnu.org/wiki/Visibility
 */

#if defined _WIN32 || defined __CYGWIN__
  #ifdef BUILDING_COLUMBUS
    #define COL_PUBLIC __declspec(dllexport)
  #else
    #define COL_PUBLIC __declspec(dllimport)
  #endif
#else
  #if defined __GNUC__
    #define COL_PUBLIC __attribute__ ((visibility("default")))
  #else
    #pragma message ("Compiler does not support symbol visibility.")
    #define COL_PUBLIC
  #endif
#endif

#define UNUSED_VAR __attribute__ ((unused))

#ifdef __cplusplus
  #include <cstddef>
  #include <cstdint>
  #include <utility>
#else
  #include<stddef.h>
  #include <stdint.h>
#endif

#ifdef __cplusplus
  #define COL_NAMESPACE_START namespace Columbus {
  #define COL_NAMESPACE_END }
#endif

#ifdef DEBUG_MESSAGES
  #ifdef __cplusplus
    #include<cstdio>
  #else
    #include<stdio.h>
  #endif
  #define debugMessage(...) printf(__VA_ARGS__);
#else
  #define debugMessage(...)
#endif


#define COLUMBUS_VERSION_STRING "${SO_VERSION}"
#define COLUMBUS_ABI_VERSION ${ABI_VERSION}
#define COLUMBUS_INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}"
#define COLUMBUS_DATADIR COLUMBUS_INSTALL_PREFIX "/share/${COL_LIB_BASENAME}${SO_VERSION_MAJOR}/"

typedef ${LETTER_TYPE} Letter_;

#ifdef __cplusplus
typedef uint32_t LetterUCS4;
//typedef uint16_t LetterUCS2;
typedef uint16_t LetterUTF16;

template<typename T>
struct LetterBaseT {
	T val;
	//using LetterType = T;

	LetterBaseT() = default;
	LetterBaseT(const T& l) : val(l) { }

	operator T() const {
		return val;
	}

#if 0
	operator const T&() const {
		return val;
	}
#endif

	operator T&&() {
		return std::move(val);
	}
};

template<typename T>
struct LetterT;

namespace megari_internal {
template<typename T>
static inline bool isHighSurrogate(const T);
template<typename T>
static inline bool isLowSurrogate(const T);

template<typename T>
static inline constexpr bool isSurrogate(const T val)
{
	return isHighSurrogate(val) || isLowSurrogate(val);
}

template<>
inline constexpr bool isHighSurrogate(const LetterUCS4) {
	return false;
}
template<>
inline constexpr bool isLowSurrogate(const LetterUCS4) {
	return false;
}

template<>
inline bool isHighSurrogate(const LetterUTF16 val) {
	return (val > 0xd7ffu) && (val < 0xdc00u);
}
template<>
inline bool isLowSurrogate(const LetterUTF16 val) {
	return (val > 0xdbffu) && (val < 0xe000u);
}
}


template<typename T>
struct LetterT : public LetterBaseT<T> {
	using LetterBaseT<T>::LetterBaseT;
	using LetterBaseT<T>::val;

	constexpr bool isSurrogate() const {
		return megari_internal::isSurrogate<T>(val);
	}

	constexpr bool isHighSurrogate() const {
		return megari_internal::isHighSurrogate<T>(val);
	}

	constexpr bool isLowSurrogate() const {
		return megari_internal::isLowSurrogate<T>(val);
	}
};

#if 0
template<>
struct LetterT<LetterUCS4> : public LetterBaseT<LetterUCS4> {
	using LetterBaseT<LetterUCS4>::LetterBaseT;

	constexpr bool isSurrogate() const {
		return false;
	}

	constexpr bool isHighSurrogate() const {
		return false;
	}

	constexpr bool isLowSurrogate() const {
		return false;
	}
};

template<>
struct LetterT<LetterUTF16> : public LetterBaseT<LetterUTF16> {
	using LetterBaseT<LetterUTF16>::LetterBaseT;

	bool isSurrogate() const {
		return isHighSurrogate() || isLowSurrogate();
	}

	bool isHighSurrogate() const {
		return (val > 0xd7ffu) && (val < 0xdc00u);
	}

	bool isLowSurrogate() const {
		return (val > 0xdbffu) && (val < 0xe000u);
	}
};
#endif

typedef LetterT<Letter_> Letter;
static_assert(std::is_pod<Letter>::value, "Letter is not POD");
static_assert(std::is_standard_layout<Letter>::value, "Letter is not standard layout");
static_assert(std::is_trivially_copyable<Letter>::value, "Letter is not trivially copyable");
static_assert(std::is_constructible<Letter>::value, "Letter is not constructible");
static_assert(std::is_trivially_default_constructible<Letter>::value, "Letter is not trivially default constructible");
static_assert(std::is_trivial<Letter>::value, "Letter is not trivial");
static_assert(sizeof(Letter) == sizeof(Letter_),
	"Size of letter wrapper class does not match that of the underlying type");
#else
typedef Letter_ Letter;
#endif /* __cplusplus */

#define INTERNAL_ENCODING "${INTERNAL_ENCODING}"

typedef uint32_t WordID;
#define INVALID_WORDID ((WordID)-1)

typedef uintptr_t DocumentID;
#define INVALID_DOCID ((DocumentID)-1)

typedef uint32_t TrieOffset;

#cmakedefine HAS_SPARSE_HASH

#endif
